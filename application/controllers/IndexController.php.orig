<?php

namespace Icinga\Module\Clustergraph\Controllers;

use Icinga\Web\Controller;

class IndexController extends Controller
{
    public function indexAction()
    {
        // Configuration
        $ICINGA_API_ENDPOINT = 'https://suboptic.hq.sol1.net:5665/v1';
        $ICINGA_API_USER = 'icinga_cluster_graph';
        $ICINGA_API_PASSWORD = 'dae1ooy3ioShaiw';

        // Fetch data from Icinga2 API using cURL
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $ICINGA_API_ENDPOINT . '/objects/zones');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_USERPWD, $ICINGA_API_USER . ':' . $ICINGA_API_PASSWORD);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);  // Disable SSL certificate verification
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);      // Do not verify the certificate's name against host

        $output = curl_exec($ch);

        if ($output === false) {
            throw new \Exception('Curl error: ' . curl_error($ch));
        }
        curl_close($ch);

        $zones = json_decode($output)->results;

        if (!is_array($zones)) {
            throw new \Exception("Failed to fetch or decode data from the Icinga2 API.");
        }

        // Process the data to build the tree
        $nodes = [];
        foreach ($zones as $zone) {
            $zoneName = $zone->name;
            $parentName = $zone->attrs->parent;
            if (!isset($nodes[$zoneName])) {
                $nodes[$zoneName] = (object) [
                    'name' => $zoneName,
                    'children' => [],
                    'endpoints' => $zone->attrs->endpoints ?? []
                ];
            }
            if ($parentName) {
                if (!isset($nodes[$parentName])) {
                    $nodes[$parentName] = (object) ['name' => $parentName, 'children' => []];
                }
                $nodes[$parentName]->children[] = $nodes[$zoneName];
            }
        }

        // Identify root zone and output the tree
        $childZones = array_map(function ($zone) {
            return $zone->attrs->parent;
        }, $zones);
        $rootZoneName = current(array_diff(array_keys($nodes), $childZones));
        $tree = $nodes[$rootZoneName];

        // Render the view with the processed data
        $this->view->treeData = $tree;
    }
}

